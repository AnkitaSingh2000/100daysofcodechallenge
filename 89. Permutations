Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


CODE:


class Solution {
    public void swap(int[] nums, int i, int j){
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    public void allPermutation(int[] nums, List<List<Integer>> ans, int index){
        if(index >= nums.length){
            List<Integer> a = new ArrayList<>();
            for(int e : nums){
                a.add(e);
            }
            ans.add(a);
            return;
        }
        
        for(int i=index; i<nums.length ;i++){
            swap(nums,index,i);
            allPermutation(nums,ans,index+1);
            swap(nums,index,i);
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        allPermutation(nums,ans,0);
        return ans;
    }
}
