Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz


CODE:

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
         ListNode curr = head;
        ListNode prev = null;
        ListNode start = null;
        while(curr!=null){
            n = n - 1;
            curr = curr.next;
            if(n<=0){
                if(start==null){
                    start = head;
                }
                else{
                    prev = start;
                    start = start.next;
                }
            }
        }
        if(prev==null){
            return start.next;
        }
        prev.next = start.next;
        return head;
        
    }
}
