Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100



CODE:


class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<String>();
    if(root == null)  return list;
    StringBuilder str = new StringBuilder();
    binaryHelper(root,list,str);
    return list;
}

private void binaryHelper(TreeNode root, List<String> list, StringBuilder str){
    if(root == null) return;
    StringBuilder newStr = new StringBuilder(str);
    if(newStr.length() != 0)
        newStr.append("->");
    newStr.append(root.val);
    if(root.left == null && root.right == null)
    {
        list.add(newStr.toString());
        return;
    }
        binaryHelper(root.left,list,newStr);
        binaryHelper(root.right,list,newStr);
    }
}
